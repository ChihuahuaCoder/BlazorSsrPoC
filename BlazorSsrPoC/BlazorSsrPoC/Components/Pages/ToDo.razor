@page "/todo"
@rendermode InteractiveServer
@using System.Text.Json
@using BlazorSsrPoC.Components.Features.ToDo
@using BlazorSsrPoC.Components.Features.ToDo.Models
@using BlazorSsrPoC.Components.Features.ToDo.Views
@inject ToDoService ToDoService

<PageTitle>To do list</PageTitle>
@if (_todos.Count == 0) {
    <span>Loading...</span>
}
else {
    <h3>Todo @_todos.Count(x => !x.IsCompleted)</h3>
    <div class="container">
        @foreach (var item in _todos) {
            <ToDoItem Item="@item" OnChangeCallback="@(isChecked => item.IsCompleted = isChecked)"/>
        }
    </div>
}

<input @bind="newTodo"/>
<button @onclick="AddTodo">Add todo</button>

@code {
    string newTodo = "";
    ICollection<ToDoDto>? _todos = new List<ToDoDto>();

    protected override async Task OnInitializedAsync() {
        _todos = await ToDoService.GetTodoAsync();
    }
    
    private void AddTodo() {
        if (!string.IsNullOrWhiteSpace(newTodo)) {
            _todos.Add(new ToDoDto {
                Title = newTodo
            });
            newTodo = String.Empty;
        }
    }
}
